{"version":3,"sources":["../../src/components/CheckboxField.jsx"],"names":["renderField","fields","label","className","input","toggle","disabled","slider","id","readOnly","meta","touched","error","value","undefined","name","event","data","onChange","checked","CheckboxField","isRequired","validate","push","required","propTypes","PropTypes","string","bool","oneOfType","element","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Field as ReduxField } from 'redux-form';\nimport { Checkbox, Form } from 'semantic-ui-react';\nimport { required } from './validation';\n\nconst renderField = (fields) => {\n  const {\n    label,\n    className,\n    input,\n    toggle,\n    disabled,\n    slider,\n    id,\n    readOnly,\n    meta: { touched, error },\n  } = fields;\n  return (\n    <Form.Field className={className} error={touched && error && true}>\n      <Checkbox\n        checked={input.value || false}\n        disabled={disabled}\n        id={id}\n        label={(\n          <label htmlFor={id}>\n            {label}\n            <small>{touched && error ? ` ( ${error} )` : undefined}</small>\n          </label>\n        )}\n        name={input.name}\n        onChange={(event, data) => input.onChange(data.checked)}\n        readOnly={readOnly}\n        slider={slider}\n        toggle={toggle}\n      />\n    </Form.Field>\n  );\n};\n\nconst CheckboxField = ({\n  label,\n  name,\n  id,\n  toggle,\n  slider,\n  disabled,\n  isRequired,\n  readOnly,\n  className,\n}) => {\n  const validate = [];\n  if (isRequired) {\n    validate.push(required);\n  }\n  return (\n    <ReduxField\n      className={className}\n      component={renderField}\n      disabled={disabled}\n      id={id}\n      label={label}\n      name={name}\n      readOnly={readOnly}\n      slider={slider}\n      toggle={toggle}\n      validate={validate}\n    />\n  );\n};\n\nCheckboxField.propTypes = {\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  id: PropTypes.string.isRequired,\n  isRequired: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.element]).isRequired,\n  name: PropTypes.string.isRequired,\n  readOnly: PropTypes.bool,\n  slider: PropTypes.bool,\n  toggle: PropTypes.bool,\n};\n\nCheckboxField.defaultProps = {\n  className: null,\n  disabled: false,\n  readOnly: false,\n  isRequired: false,\n  slider: false,\n  toggle: false,\n};\nexport default CheckboxField;\n"],"file":"CheckboxField.js"}