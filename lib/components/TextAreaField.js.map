{"version":3,"sources":["../../src/components/TextAreaField.jsx"],"names":["renderField","placeholder","id","input","label","meta","touched","error","className","disabled","size","readOnly","handleOnChange","undefined","event","data","onChange","TextAreaField","name","isRequired","validate","newValidator","slice","push","required","propTypes","PropTypes","string","oneOfType","element","bool","oneOf","arrayOf","func","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, TextArea } from 'semantic-ui-react';\nimport { Field } from 'redux-form';\nimport { required } from './validation';\n\nconst renderField = ({\n  placeholder,\n  id,\n  input,\n  label,\n  meta: { touched, error },\n  className,\n  disabled,\n  size,\n  readOnly,\n  handleOnChange,\n}) => (\n    <Form.Field className={className} error={touched && error && true}>\n      {label && (\n        <label htmlFor={id}>\n          {label}\n          <small>{touched && error ? `* ( ${error} )` : undefined}</small>\n        </label>\n      )}\n      <TextArea\n        {...input}\n        disabled={disabled}\n        id={id}\n        onChange={(event, data) => {\n          if (typeof handleOnChange === 'function') {\n            handleOnChange(event, data);\n          }\n          input.onChange(event);\n        }}\n        placeholder={placeholder}\n        readOnly={readOnly}\n        size={size || undefined}\n      />\n    </Form.Field>\n  );\n\nconst TextAreaField = ({\n  name,\n  label,\n  placeholder,\n  isRequired,\n  id,\n  disabled,\n  readOnly,\n  size,\n  validate,\n  onChange,\n  className,\n}) => {\n  const newValidator = validate.slice();\n  if (isRequired) {\n    newValidator.push(required);\n  }\n  return (\n    <Field\n      className={className}\n      component={renderField}\n      disabled={disabled}\n      handleOnChange={onChange}\n      id={id}\n      label={label}\n      name={name}\n      placeholder={placeholder}\n      readOnly={readOnly}\n      size={size}\n      validate={validate}\n    />\n  );\n};\n\nTextAreaField.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  placeholder: PropTypes.string,\n  disabled: PropTypes.bool,\n  readOnly: PropTypes.bool,\n  isRequired: PropTypes.bool,\n  className: PropTypes.string,\n  size: PropTypes.oneOf([\n    'mini',\n    'small',\n    'large',\n    'big',\n    'huge',\n    'massive',\n    'normal',\n  ]),\n  validate: PropTypes.arrayOf(PropTypes.func),\n  onChange: PropTypes.func,\n};\n\nTextAreaField.defaultProps = {\n  validate: [],\n  label: '',\n  className: '',\n  disabled: false,\n  isRequired: false,\n  readOnly: false,\n  onChange: null,\n  placeholder: '',\n  size: null,\n};\n\nexport default TextAreaField;\n"],"file":"TextAreaField.js"}